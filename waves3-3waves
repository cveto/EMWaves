<!DOCTYPE html>
<html>
<head>
<style>
body {
  background-color: linen;
}

input[type="range"] {
  width:400px;
}

</style>

</head>



<script>

// CONSTANTS		
var c0mmpatts=299792458*Math.pow(10,9)						// Speed of light - micrometers per atoseconds
				
var fgreen=565;												// THz 10^12	green color median frequency
var fred=442.5;												// THz 10^12	red   color median frequency
var fblue=640;												// THz 10^12	blue  color median frequency
var ftest=299.792458;										// freqency at which wavelength is exzactly 1 micrometer and its period is 3335.640952 attoseconds
				
var Amp = 20;												// Just to make it look presentable on the canvas.
				
				
// CANVAS VARIABLES				
var ctx;													// CONTEXT
var sampling=100; 											// SAMPLES PER MICROMETER. This has nothing to do with presentation on the screen
var DPmm=50;												// DOTS PER MICROMETER (resolution)

// TIME: t=t+delta_t = t + delta_t*slowdown_factor
var t=0;													// time in attoseconds since the beginnig of simulation
var delta_t_min=10;											// DO NOT CHANGE THIS - modify slowdown_factor instead.
															// TIME SAMPLING RATE OF SIGNAL, HOW MUCH REAL TIME HAS PASED BETWEEN 2 SNAPSHOTS?
															// e.g. at 300THZ, it takes the signal 3 femtoseconds to  travel the distance of 1 wavelength	
															// We want to see the signal traveling smoothly, so we set this to about 1/100th or however much computer lets us.
															// This is independent of the material.
															// To slow down the ray, we have to either 1: speed up animation (can't do dynamically unfortunately)
															// So I change the time sampling rate by modifying delta_t. Max should be 1500attoseconds based on the frequencies used
var slowdown_factor;										// Slowing down wave is done by increasing sample time.
var delta_t=delta_t_min*slowdown_factor;					// TIME RESOLUTION - this variable is redefined in function draw
					
var intervalms=20;											// How often the canvas is refreshed - every XY miliseconds (10ms = 100HZ)
															// every intervalms the compute has to calculate the whole image.. can he do it in 20ms?


// Center point of where the ray refracts
var xCenter1=350;
var yCenter1=350;


// WAVES

//  wave1[freqency, pathlength in micrometers, amplitude]
var wave1=[ftest,  5, Amp];		// By default 2 and 3 are set to 1 and 2
//var wave2=[ftest, 5, Amp];		// by default 2 and 3 are ignored

// MATERIALS
var n1;
var n2;

// STOPWATCH
var stopwatch1=0;
var stopwatch2=0;

// PLAYGROUND
var strk_style_before;

// LOADS WITH THML
function init() {
	ctx= myCanvas.getContext('2d');
	
	// Set fronts to unchecked - There apparently isn't a checked="0" which would cause it to be unchecked?
	document.getElementById("markFronts").checked=0;
	document.getElementById("markFields").checked=0;
	
	setInterval(draw,intervalms);							// Calls function draw every intervalms miliseconds
	//draw();
	
}

// FUNCTION THAT IS BEEING CALLED EVERY XYZ MILISECOND FOR ANIMATION
function draw() {
	//---- TIME INFO ----
		// GET SPEED FROM USER, APPLY SPEED, SHOW USER WHAT SPEED IS CURRENTLY IN THE RUN
			slowdown_factor=document.getElementById("range_speed").value;
			delta_t=delta_t_min*slowdown_factor;
			document.getElementById("value_speed").innerHTML=slowdown_factor;

		// Time is actually flowing?
		if (document.getElementById("button_pause").value==1) 	{
			t+=delta_t
		}
		document.getElementById("value_time").innerHTML=t/1000;

	// BEGIN DRAWING ON THE CANVAS
		var c = document.getElementById("myCanvas");
		ctx = c.getContext("2d");
		ctx.clearRect(0,0, 3000,3000);
	
	// WALLS
		ctx.beginPath();
		ctx.strokeStyle = 'purple';	
		ctx.rect(0, 0, c.width, c.height);								// frame
		ctx.stroke();
	
		ctx.beginPath();
		ctx.strokeStyle = 'green';			
		ctx.rect(30, 10, DPmm, 2);										// 1 micrometer reference
		ctx.fillStyle = "green";
		ctx.font = "15px Arial";
		ctx.fillText("1 micrometer", 90, 16);
		
		ctx.rect(0, xCenter1, 1000, 2);									// Horizontal Line
		ctx.rect(yCenter1, 0, 2,1000);									// Vertical line
		ctx.stroke();
		

	
		// DRAW BOTH RAYS
		//(fTHz,raylength,locationx,locationy,Amp)
		// Source of Frequency?
		
		// Get frequency for left most wave
	
		// LEFT FREQUENCY RAY
		var fTHz=document.getElementById("range_frequency1").value;
		document.getElementById("value_frequency1").innerHTML=fTHz;
		
		var fTHz2=document.getElementById("range_frequency2").value;
		document.getElementById("value_frequency2").innerHTML=fTHz2;

		
		
		
		// Material Above
		n1=document.getElementById("range_n1").value/100;
		document.getElementById("value_n1").innerHTML=n1;
		
		// Material below
		n2=document.getElementById("range_n2").value/100;
		document.getElementById("value_n2").innerHTML=n2;

		// Frequency asfasdfasldf Dispersion is calculated in the next function

		// Left most 3 rays. Saving just for the summed wav. It's an array of 2 arrays
		ctx.beginPath();
		var arrays_leftmost=draw2rays(fTHz,wave1[1],xCenter1,yCenter1,15,n1,n2);
		ctx.stroke();

		// Middle 3 rays ray
		ctx.beginPath();
		var arrays_middle=draw2rays(fTHz2,wave1[1],xCenter1+300,yCenter1,15,n1,n2);		// n2 is not connected to dispersitvity yet
		ctx.stroke();
		// Sum of leftmost and middle ray. Needs raylength to get starting position	

		ctx.beginPath();
		drawSummedRayfromArray(arrays_leftmost,arrays_middle,xCenter1+600,yCenter1,wave1[1]);
		ctx.stroke();
		

}

function draw2rays(fTHz,raylength,locX,locY,Amp,n1,n2) {
//--- WAVES---

	// TEMPORARILY HERE; SHOULD BE MOVeD
	// THIS TELLS IF N2 is frequency dependent
	// Get dispersion-frequency coefficient
		var dispersivity=document.getElementById("range_dispersion").value;
		document.getElementById("value_randgedispersion").innerHTML=dispersivity;
		
		if (dispersivity==1) {
		//alert("bam!");
			n2=n2*fTHz/300;		// The higher the freqency, he bigger the n, with at 300Thz being one
		}



	// INCOMING WAVE
		
		// GET WAVE LENGTH
		var raylength;
		
		// GET THETA ANGLE FROM USER					
		theta1=document.getElementById("theta1").value/10;
		document.getElementById("value_theta1").innerHTML=theta1*10;
		var thetaRad=Math.PI/180*(theta1);								// Theta in radians
		var tilt=90-theta1;												// Angle from horizontal line... because Javascript
		
		
	// Starting point of the incoing way is ray_length away from the central point
		var xStart=locX-raylength*DPmm*Math.cos(tilt*Math.PI/180);
		var yStart=locY-raylength*DPmm*Math.sin(tilt*Math.PI/180);		
		
	var arrayTopRay=drawRay(fTHz,raylength,Amp,ctx,xStart,yStart,tilt,0,n1,0);


	//!!!!!!!!!!!!!!!!!
	// REFRACTED WAVE
		//  Strating point of refracted wave is the ending point of incoming wave
			var xEndWave1 = xStart+raylength*DPmm*Math.cos(tilt*Math.PI/180);
			var yEndWave1 = yStart+raylength*DPmm*Math.sin(tilt*Math.PI/180);
			
		// Sneels Law
			var theta2rad=Math.asin(Math.sin(thetaRad)*n1/n2);	
			var tilt2=90-theta2rad*180/Math.PI;										// Tilt is used for javascirpt canvas rotation
		
		// FRESNEL FERSNEL FRESNEL's equations for non-magnetic transparent material Z=f(epsilon)
		// This is for E field on s plane, for power it has to be.. squared
		// IT depends on polarization on the incoming wave
		var pol_choice=document.getElementById("range_polarisation").value;
		if (pol_choice==0) {				// This is for E field on p plane, for power it has to be.. squared
			var RpTOP=n1*Math.cos(theta2rad) - n2*Math.cos(thetaRad);
			var RpBOT=n1*Math.cos(theta2rad) + n2*Math.cos(thetaRad);
			var Rp=Math.pow(RpTOP/RpBOT,2);
			var R=Rp;
			var T=1-Rp;	
			
		} else if (pol_choice==1) {
			var RsTOP=Math.abs(n1)*Math.cos(thetaRad) - Math.abs(n2)*Math.cos(theta2rad);
			var RsBOT=Math.abs(n1)*Math.cos(thetaRad) + Math.abs(n2)*Math.cos(theta2rad);
			var Rs=Math.pow(RsTOP/RsBOT,2);										
			var R=Rs;
			var T=1-Rs;												// E field amplitude reduced by?		
		} else {
			alert("I dun goffed! Something wrong with the choice of polarisation in the code");
		}

		
		// Calculating the phase of ray 2 - bacause our refracted wave is simulated as a new ray and I have to know at what phase the ray 1 ends
			var wave1_wavelength=calculate_wavelenght(fTHz,n1);
			var wave2_phase=calculate_border_phase(raylength,wave1_wavelength);
		
		// IF TOTAL REFLECTION OCCURS - Ignore fresnell equations completelly
			if (isNaN(theta2rad)) {	
				var R=1;			
			} 
			
		// Power to E-field
			var Re=Math.sqrt(R);
			var Te=Math.sqrt(T);
	
		// delay of ray2 because waiting on ray1.. depends only on the speed of light. so t=c/distance
		var tdelay=calculateTravelTime(raylength,n1);
		
		// DRAW RAY 2 ---------------
		var arrayBottomRay=drawRay(fTHz,raylength,Amp*Te,ctx,xEndWave1,yEndWave1,tilt2,wave2_phase,n2,tdelay);



	//!!!!!!!!!!!!!!!!!
	// MIRROR REFLECTED WAVE
		var theta3rad = thetaRad-Math.PI/2;
		var tilt3=theta3rad*180/Math.PI;
		
		//drawRay(fTHz,raylength,Amp,ctx,xStart,yStart,tilt,0,n1,0);
		var arrayReflected=drawRay(fTHz,raylength,Amp*Re,ctx,xEndWave1,yEndWave1,tilt3,wave2_phase,n1,tdelay);


		// return top and bottom rays
		return [arrayTopRay,arrayBottomRay,arrayReflected];

}

// FUNCTION THAT ACTUALLYD DRAWS THE WAVES
function drawRay(fTHz,raylength,Amp,ctx,xStart,yStart,tilt,phaseShift,n,tdelay) {


	// Defined
	var c0=299792458										// Speed of light - meters per second OR micrometers per microsecond
	var c0mmpatts=299792458/Math.pow(10,12)					// micro - nano - piko - femto - atto .. 12 zeroes. micrometers/attoseconds (Should be a number around 50 for 10 micrometers)
	var array_wave=new Array();
			
	// Rotatino around which point?		
	var rotatex = xStart;									// By default the rotation is around the starting point of the wave
	var rotatey = yStart;		
				
	// Pulled 		
	var fTHz;									// f in TeraHerz 10^12
	var raylength;								// length of wave in micrometers in the direction of movement for presentation purposes)
	var Amp;										// Wave Amplitude - has no meaning, just to make it nice on the canvas
			
	// Calculated		
	var raytime = raylength*n/c0mmpatts;					// time for wave to travel the defined length
	var lambda1=calculate_wavelenght(fTHz,n);				// get vavelenght in micrometers
	var numPeriodsToDraw=raylength/lambda1;					// depends on the length of the distance traveled
	var w11=2*Math.PI*fTHz/Math.pow(10,6);					// Angular speed in rad/attoseconds		
			
	// START DRAWING WHERE?
	ctx.moveTo(xStart,yStart);	

	// ROTATE DRAWN IMAGE AROUND WHICH POINT (for the angle - theta of wave)
	// Basically this thing draws wave in x diretin then rotates it to avoid cartezian converions.
	ctx.translate(rotatex,rotatey);		
	ctx.rotate(tilt * Math.PI / 180);
	ctx.translate(-rotatex,-rotatey);
	
	// Calculated
	var lambda1=calculate_wavelenght(fTHz,n);				// get vavelenght in micrometers
	var k1 = 2*Math.PI/lambda1;								// Wavenumber in 1/micrometers
	
	
	// THIS SIMULATES WAVE IS APPROACHING TO THE SUFACE.
	
	if (t<=raytime+tdelay)	{
		var how_many_samples=(t-tdelay)*sampling*c0mmpatts/n			// t [attosec] * sampling [samples/micrometer] * c0mmpatts / n [um/attosec]
	} else {
		var how_many_samples=sampling*raylength;			// if 12 micrometers, then 12*sampling
	}
	
	for (var i=0;i<=how_many_samples;++i) {	// All is relative to wavelenght

		// SAMPLING SIZE - this represent the wave from 
		var x=i*1/sampling;							
		var mmppx=x*DPmm									// StretchFactor (How many pixels represents a micrometer of a wavelenght
		


		// -- MAIN FUNCTION
		//--------------------  													//The eqation represents a signal which is infinteley long, has allways and will exist. When presenting this on canvas
		var f1=Amp*Math.sin(k1*x-w11*t+phaseShift);									// i am movinb both with time as well as with direction, since I am seeing the wave moving. 
		//var f1 = wave_equation(Amp,k1,x,w11,t,phaseShift);						// The infinite ray is drawn an frozen every delat_t. How much did the wave move at this deltat? c=dl/dt --> dtl=c*dt
		// Save the wave_form?
		array_wave[i]=f1;
		//--------------------
		
		//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
		//putRayOnCanvas(xStart,yStart,mmppx,f1,ctx);
		putRayOnCanvas(xStart,yStart,mmppx,f1,ctx,Amp);
		//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
		// Returns the whole wave it just made
	}

	// Rotate K.O. back
	ctx.translate(rotatex,rotatey);
	ctx.rotate(-tilt * Math.PI / 180);
	ctx.translate(-rotatex,-rotatey);	
	
	// Return the array if you want it.
	return array_wave;
}

// Calculates f(x) like a million times
function wave_equation(Amp,k1,x,w11,t,phaseShift) {
	return Amp*Math.sin(k1*x-w11*t+phaseShift);
}

function putRayOnCanvas(xStart,yStart,mmppx,f1,ctx,Amp) {

	// Make the wave look like it's travelling from 0 without modifying the equation
		if(document.getElementById("markWaves").checked == '1'){	
			ctx.rect(xStart+mmppx,yStart+f1, 1, 1);			// Makes dots
			//ctx.lineTo(xStart+mmppx,yStart+f1);			// Connets lines
		}
		
		if(f1<-Amp*(0.990) && document.getElementById("markFronts").checked == true){							// Detecting peak.. one way of doing it
			ctx.rect(xStart+mmppx,yStart-25,0.5,50);
		}
			
		// This little fella is very CPU hungry. Optmize? Who has time for that, just wait 18 months  and it'll be twice faster!
		if(document.getElementById("markFields").checked == '1'){	// So what's the logic with this stroke... The color is predefined before this fucntion is called, So gotta draw everything that was calcualted so far, end that draw, change contex color and start a new one. God...
			ctx.stroke();
			
			// JAvascript faster with fixed number.
			// Normalization with Amplitude of the Incoming wave! Now how am I going to get that in here...global variable again..
			var incoming_ray_amp=wave1[2];
			var temp_f1=Math.floor((((f1/incoming_ray_amp)+1)/2)*7);			// Basically puts the values between 0 and 7--8bit color code			
			
			switch (temp_f1) {
			  case (0):
				ctx.strokeStyle = '#FBEFEF';	
				break;
			  case (1):
				ctx.strokeStyle = '#F8E0E0';	
				break;
			  case (2):
				ctx.strokeStyle = '#F6CECE';	
				break;
			  case (3):
				ctx.strokeStyle = '#F5A9A9';	
				break;
			  case (4):
				ctx.strokeStyle = '#F78181';	
				break;
			  case (5):
				ctx.strokeStyle = '#FA5858';	
				break;
			  case (6):
				ctx.strokeStyle = '#FE2E2E';	
				break;
			  case (7):
				ctx.strokeStyle = '#FF0000';	
				break;
			}	
			ctx.beginPath();
			ctx.rect(xStart+mmppx,yStart-25,0.5,50);			// Makes lines
			//ctx.rect(xStart+mmppx,yStart+f1, 1, 1);			// Makes dots
		}		

		
}

// DRAW SUMMED WAVE FROM ARRAYS
function drawSummedRayfromArray(arrays1,arrays2,locX,locY,raylength) {
//--- WAVES---
	// Get arrays:
	var wave1incoming=arrays1[0];
	var wave1refracted=arrays1[1];
	var wave1reflected=arrays1[2];
	
	var wave2incoming=arrays2[0];
	var wave2refracted=arrays2[1];
	var wave2reflected=arrays2[2];
		
	// GET THETA ANGLE FROM USER					
	var theta1=document.getElementById("theta1").value/10;
	document.getElementById("value_theta1").innerHTML=theta1*10;
	var thetaRad=Math.PI/180*(theta1);								// Theta in radians
	var tilt=90-theta1;												// Angle from horizontal line... because Javascript

	//!!!!!!!!!!!!!!!!!		
	// INCOMING WAVE
		// SUM UP 2 arrays -- thank you https://stackoverflow.com/questions/5760058/how-to-return-multiple-arrays-from-a-function-in-javascript
		var waveIncSum = wave1incoming.map(function (num, idx) {
			return num + wave2incoming[idx];
		});

		// Starting point of the incoing wave is ray_length away from the central point
		var xStart=locX-raylength*DPmm*Math.cos(tilt*Math.PI/180);
		var yStart=locY-raylength*DPmm*Math.sin(tilt*Math.PI/180);		
			
	drawRayfromArray(raylength,xStart,yStart,tilt,waveIncSum);
	
	
	//!!!!!!!!!!!!!!!!!
	// REFRACTED WAVE
	// SUM UP 2 ARRAYS
		var waveRefSum = wave1refracted.map(function (num, idx) {
			return num + wave2refracted[idx];
		});	
		
		//  Strating point of refracted wave is the ending point of incoming wave
			var xEndWave1 = xStart+raylength*DPmm*Math.cos(tilt*Math.PI/180);
			var yEndWave1 = yStart+raylength*DPmm*Math.sin(tilt*Math.PI/180);
			
		// Sneels Law
			var theta2rad=Math.asin(Math.sin(thetaRad)*n1/n2);	
			var tilt2=90-theta2rad*180/Math.PI;										// Tilt is used for javascirpt canvas rotation

		// Shift phase for total reflection
			if (isNaN(theta2rad)) {	
				theta2rad=thetaRad-Math.PI/2;
				tilt2=theta2rad*180/Math.PI;
			} 
	drawRayfromArray(raylength,xEndWave1,yEndWave1,tilt2,waveRefSum)
	
	//!!!!!!!!!!!!!!!!!
	// REFLECTED WAVE
		// SUM UP 2 arrays -- thank you https://stackoverflow.com/questions/5760058/how-to-return-multiple-arrays-from-a-function-in-javascript
		var waveReflSum = wave1reflected.map(function (num, idx) {
			return num + wave2reflected[idx];
		});

		var theta3rad = thetaRad-Math.PI/2;
		var tilt3=theta3rad*180/Math.PI;			
		
	drawRayfromArray(raylength,xEndWave1,yEndWave1,tilt3,waveReflSum,Amp)

}

// DRAW RAY FROM ARRAY - for the summed wave
function drawRayfromArray(raylength,xStart,yStart,tilt,array_wave,Amp) {

	// Rotating around which point?		
	var rotatex = xStart;									// By default the rotation is around the starting point of the wave
	var rotatey = yStart;		
				
	// Pulled 	
	
	// START DRAWING WHERE?
	ctx.moveTo(xStart,yStart);	

	// ROTATE DRAWN IMAGE AROUND WHICH POINT (for the angle - theta of wave)
	ctx.translate(rotatex,rotatey);		
	ctx.rotate(tilt * Math.PI / 180);
	ctx.translate(-rotatex,-rotatey);
	
	for (var i=0;i<=array_wave.length;++i) {

		var x=i*1/sampling;							
		var mmppx=x*DPmm									// StretchFactor (How many pixels represents a micrometer of a wavelenght
		var f1=array_wave[i]
		
		putRayOnCanvas(xStart,yStart,mmppx,f1,ctx,Amp)
	}

	// Rotate K.O. back
	ctx.translate(rotatex,rotatey);
	ctx.rotate(-tilt * Math.PI / 180);
	ctx.translate(-rotatex,-rotatey);	
	
	// Return the array if you want it.
}

function calculate_wavelenght(fTHz,n) {						// Takes n and f in Thz
	var c0mmpms=299792458									// kilometers per second == milimeters per microseconds
	var lambda_micrometers=c0mmpms/n/fTHz/1000000;			// in micrometers
	return lambda_micrometers;
}

function calculate_border_phase(distance_travelled,lambda) {	

	// What is the wavelenght of the wave?					2.0 um
	// lambda

	// What is the distance travelled in micrometers?  		6.8 um
	// distance_travelled.			

	// How many lambdas fit in to the distance traveled?	3.4
	var hmlfittd = distance_travelled/lambda;
	
	// How many whole lambdas fit in to this distance?		3
	var hmlfittd_whole=Math.floor(hmlfittd);
	
	// And the difference that doesnt fit is??				0.4 of a lambda
	var hmlfittd_left=hmlfittd-hmlfittd_whole;
	
	// And in radians, how much is that?					0.4*2PI
	var phase = hmlfittd_left*2*Math.PI;											

	return phase;
}

function pause_time() {
	if (document.getElementById("button_pause").value==0) {
	
		document.getElementById("button_pause").value=1;								// WHY IS THIS necessary again? To know if time is flowing or not.
		document.getElementById("button_pause").innerHTML="PAUSE TIME"
		stopwatch1=stopwatch2;
		stopwatch2=0;
		//document.getElementById("value_timer").innerHTML="";

	} else {
		document.getElementById("button_pause").value=0
		document.getElementById("button_pause").innerHTML="UNPAUSE TIME"
		stopwatch2=t;
		var time_passed=(stopwatch2-stopwatch1)/1000;
		
		//document.getElementById("value_timer").innerHTML=Math.floor(time_passed*1000)/1000;
		//document.getElementById("value_timer").innerHTML=;
	}
}

function reset_time() {
	t=0;
}

function THZ2aas (fTHz) {
	return 1/fTHz*1000000;
}

function calculateTravelTime(distanceInMicrometers,n) {
	var c0mmpus=299792458/n;							// meters per second = micrometers per microsecond
	var timeinatts=distanceInMicrometers/(c0mmpus);		// delay in microseconds
	return timeinatts*Math.pow(10,12);					// delay in attoseconds
}

function findCriticalAngle() {
	// Get frequency
	
	// get n2 and n2
	var n1 = document.getElementById("range_n1").value/100;
	var n2 = document.getElementById("range_n2").value/100;
	var criticalAngle=Math.asin(n2/n1);
	
		// If not possible to calculate
		if (isNaN(criticalAngle)) {	
			alert("No Critical Agnle exists");
		} 
	var criticalAngleDeg=Math.ceil((criticalAngle*180/Math.PI)*10);
	document.getElementById("theta1").value=criticalAngleDeg
	document.getElementById("test1").innerHTML=criticalAngleDeg;

	// Calculate total reflectino angle
}

function findBrewsterAngle() {
	// Get frequency
	
	// get n2 and n2
	var n1 = document.getElementById("range_n1").value/100;			// Don't really need to divide, but let's be consisent.
	var n2 = document.getElementById("range_n2").value/100;			// Not optimizing for power here optimizing for readability... (and still failing)
	var brewsterAngle=Math.atan(Math.abs(n2)/Math.abs(n1));
	
		// If not possible to calculate
		if (isNaN(brewsterAngle)) {	
			alert("No Brewster Angle exists");
		} 
		
	var brewsterAngleDeg = Math.ceil(brewsterAngle*180/Math.PI*10)/10;		// Accurate by 0.1 degree
	document.getElementById("theta1").value=brewsterAngle*180/Math.PI*10;
	// Calculate total reflectino angle
}

</script>

<body onLoad="init();">
A:<span id="test1">ready</span></br>
B:<span id="test2">ready</span></br></br>
<div id="test3" value=10></div>

<button id="button_reset" onclick="reset_time()">RESET TIME</button><br />
FREQUENCY1: <span id="value_frequency1"></span>THz<input type="range" id="range_frequency1" min="0" max="900" value="260"> <br/>
FREQUENCY2: <span id="value_frequency2"></span>THz<input type="range" id="range_frequency2" min="0" max="900" value="260"> <br/>

THETA1: <span id="value_theta1"></span>°<input type="range" id="theta1" min="0" max="900" value="560"> <br/>
SPEED: x<span id="value_speed"></span> <input type="range" id="range_speed" min="1" max="40" value="20"><button id="button_pause" value="1" onclick="pause_time()">PAUSE</button></br>
n1: <input type="range" id="range_n1" min="-100" max="300" value="100"><span id="value_n1"></span></br>
n2: <input type="range" id="range_n2" min="-100" max="300" value="160"><span id="value_n2"></span></br>
Dispersion [1 for non-dispersive media]: <input type="range" id="range_dispersion" min="0" max="1" value="0"><span id="value_randgedispersion"></span></br>
This dispersivity is linearly dependend of the frequency. the amount tells how much

TIME: [femtoseconds (10^-15) ]  <span id="value_time"></span> | <span id="value_timer"></span> <br />
Snakies: <input type="checkbox" id="markWaves" checked="1"> | Fronts: <input type="checkbox" id="markFronts" checked="1"> || Fields: <input type="checkbox" id="markFields" checked="1"> <br />
<button id="button_totalref" onclick="findCriticalAngle();">Total reflection angle"</button>
<button id="button_totalref" onclick="findBrewsterAngle();">Brewster angle"</button></br>
GRAY LINE is 1 micrometer.  N smallreth than 1 - not programmed to show real results<br />



P polarized wave <input type="range" id="range_polarisation" min="0" max="1" value="0">S polarized wave</br>

<b>MONOCHROMATIC POLARIZED WAVE FALLING ON A NON MAGNETC NON-CONDUCTIVE MEDIUM WITH A FREQUENCY INDEPENDENT REFRACTIVE INDEX</b>
<canvas id="myCanvas" width="3000" height="3000" style="border:1px solid #d3d3d3;">
Your browser does not support the HTML5 canvas tag.</canvas>

<canvas id="testcanvas" width="3000" height="3000" style="border:1px solid #d3d3d3;">
Your browser does not support the HTML5 canvas tag.</canvas>
a


</body>
</html>
